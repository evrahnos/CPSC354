val nil = 
    let val a = new [] in 
    a := "NULL";
    a ;;

val cons = \e. \a. 
    let val b = new [] in
    b := [e,a];
    b ;;

val hd = \a.
    case !a of {
        "NULL"-> "tried to take the head of an empty list",
        [e,a'] -> e 
    } ;;

val tl = \a.
    case !a of {
        "NULL" -> "tried to take the tail of an empty list",
        [e,a'] -> a'
    } ;;

-- `print (cons 6 (cons 4 (cons 2 nil)))` outputs [6,4,2]
rec print = \list.
    case !list of {
        "NULL" -> [],
        _ -> (hd list):(print (tl list))
    } ;;


-----------------------  INSERT AND SORT FUNCTIONS SHOWN BELOW  -----------------------


val curr = new [];;
val insert = \n. \list.
    let val elem = new [] in
    case (!list) of {
        "NULL" -> elem := [n, nil];
                  curr := elem,
        _ -> curr := list;
             case (n <= hd !curr) of {
                true -> elem := [n, !curr];
                        curr := elem,
                false -> elem := [n, "NULL"];
                         while (tl elem == "NULL") do
                            case (! (tl !curr)) of {
                                "NULL" -> elem := [n, nil];
                                          !curr := [hd !curr, elem],
                                _ -> case (n <= hd (tl !curr)) of {
                                        true -> elem := [n, tl !curr];
                                                !curr := [hd !curr, elem],
                                        false -> curr := tl !curr
                                }
                            };
                         curr := list
             }
    };;


rec sort = \list.
    case !list of {
        "NULL" -> nil,
        _ -> case (!(tl list)) of {
                "NULL" -> list,
                _ -> insert (hd list) (sort (tl list))
             }
    };;


-----------------------  TEST CASES AND DEBUGGING SHOWN BELOW  -----------------------


-- TEST CASES 
-- insert
print (insert 3 (insert 1 (insert 4 (insert 2 (insert 5 nil)))));;   -- returns [1, 2, 3, 4, 5]
print (insert 5 (insert 4 (insert 3 (insert 2 (insert 1 nil)))));;   -- returns [1, 2, 3, 4, 5]
print (insert 2 (insert 3 (insert 1 (insert 4 (insert 2 nil)))));;   -- returns [1, 2, 2, 3, 4]
-- sort
print (sort (cons 3 (cons 1 (cons 4 (cons 2 (cons 5 nil))))));; -- returns [1, 2, 3, 4, 5]
print (sort (cons 6 (cons 4 (cons 2 nil))));;                   -- returns [2, 4, 6]
print (sort (cons 2 (cons 3 (cons 1 (cons 4 (cons 2 nil))))));; -- returns [1, 2, 2, 3, 4]
print (sort (nil));;                                            -- returns []


-- DEBUGGING CODE
-- insert --- walking through the last insert test case, insert 5 (insert 4 (insert 3 (insert 2 (insert 1 nil))))
{-
--To create the list, results in []--
val list = nil ;;

--To insert 2 (testing to insert element in empty list), results in [2]--
val elem = new [] ;;
!list ;;                        --(check if == "NULL")
elem := [2, nil] ;;
curr := elem ;;

--To insert 4 (testing to append element to entire list), results in [2, 4]--
val elem = new [] ;;
!list ;;                        --(check if != "NULL")
curr := list;
4 < hd !curr ;;                 --(check if false)
elem := [4, "NULL"];
tl elem == "NULL" ;;            --(check if true)
! (tl !curr) ;;                 --(check if == "NULL")
elem := [4, nil] ;;
!curr := [hd !curr, elem] ;;
tl elem == "NULL" ;;            --(check if false)
curr := list ;;

--To insert 1 (testing to prepend element to entire list), results in [1, 2, 4]--
val elem = new [] ;;
!list ;;                        --(check if != "NULL")
curr := list;
1 < hd !curr ;;                 --(check if true)
elem := [1, !curr] ;;
curr := elem ;;

--To insert 3 (testing to insert element between elements and moving the curr pointer), results in [1, 2, 3, 4]--
val elem = new [] ;;
!list ;;                        --(check if != "NULL")
curr := list;
3 < hd !curr ;;                 --(check if false)
elem := [3, "NULL"];
tl elem == "NULL" ;;            --(check if true)
! (tl !curr) ;;                 --(check if != "NULL")
3 <= hd (tl !curr) ;;           --(check if false)
curr := tl !curr ;;
tl elem == "NULL" ;;            --(check if true)
! (tl !curr) ;;                 --(check if != "NULL")
3 <= hd (tl !curr) ;;           --(check if true)
elem := [3, tl !curr] ;;
!curr := [hd !curr, elem] ;;
tl elem == "NULL" ;;            --(check if false)
curr := list ;;

--To insert 2 (testing that duplicates are handled correctly), results in [1, 2, 2, 3, 4]--
val elem = new [] ;;
!list ;;                        --(check if != "NULL")
curr := list;
2 < hd !curr ;;                 --(check if false)
elem := [2, "NULL"];
tl elem == "NULL" ;;            --(check if true)
! (tl !curr) ;;                 --(check if != "NULL")
2 <= hd (tl !curr) ;;           --(check if true)
elem := [2, tl !curr] ;;
!curr := [hd !curr, elem] ;;
-}


-- sort --- walking through the second sort test case, sort (cons 6 (cons 4 (cons 2 nil)))
{-
--To create the list, results in [6, 4, 2]--
val list = cons 6 (cons 4 (cons 2 nil)) ;;

--First recursive case, results in `insert 6 [4, 2]`
!list ;;                        --(check if != "NULL")
!(tl list) ;;                   --(check if != "NULL")
hd list ;;                      --(check if 6)
!(tl list) ;;                   --(check if[4, <address of next element in list>])

--Second recursive case, results in `insert 6 (insert 4 [2])`
!list ;;                        --(check if != "NULL")
!(tl list) ;;                   --(check if != "NULL")
hd list ;;                      --(check if 4)
!(tl list) ;;                   --(check if [2, <address 0>])

--Third recursive case, results in `insert 6 (insert 4 (insert 2 nil))`
!list ;;                        --(check if != "NULL")
!(tl list) ;;                   --(check if == "NULL")
list ;;                         --(check if it is address that points to [2, <address 0>])

--Insert functions now execute, which have already been tested and debugged as shown above `sort`
-}
